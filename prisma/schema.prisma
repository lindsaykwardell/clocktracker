generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id                       String         @id @default(uuid())
  bgg_id                   Int?           @unique
  user_id                  String
  created_at               DateTime?      @default(now()) @db.Timestamptz(6)
  date                     DateTime
  script                   String
  script_id                Int?
  location_type            LocationType   @default(ONLINE)
  location                 String
  community_name           String         @default("")
  community                Community?     @relation(fields: [community_id], references: [id])
  community_id             Int?
  player_count             Int?
  traveler_count           Int?
  player_characters        Character[]
  win                      WinStatus
  notes                    String
  image_urls               String[]
  storyteller              String?
  co_storytellers          String[]
  user                     UserSettings?  @relation(fields: [user_id], references: [user_id])
  associated_script        Script?        @relation(fields: [script_id], references: [id])
  grimoire                 Grimoire[]
  grimoire_id              Int?           @unique
  is_storyteller           Boolean        @default(false)
  parent_game              Game?          @relation("AssociatedGame", fields: [parent_game_id], references: [id])
  parent_game_id           String?
  child_games              Game[]         @relation("AssociatedGame")
  ignore_for_stats         Boolean        @default(false)
  tags                     String[]
  waiting_for_confirmation Boolean        @default(false)
  deleted                  Boolean        @default(false)
  deleted_date             DateTime?
  privacy                  PrivacySetting @default(PUBLIC)
}

enum WinStatus {
  WIN
  LOSS
  NOT_RECORDED
}

model Grimoire {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  tokens     Token[]
  game       Game[]
}

model Token {
  id              Int           @id @default(autoincrement())
  role            Role?         @relation(fields: [role_id], references: [id])
  role_id         String?
  related_role    Role?         @relation("RelatedToken", fields: [related_role_id], references: [id])
  related_role_id String?
  alignment       Alignment
  is_dead         Boolean       @default(false)
  order           Int
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  grimoire        Grimoire?     @relation(fields: [grimoire_id], references: [id])
  grimoire_id     Int?
  player_name     String        @default("")
  player          UserSettings? @relation(fields: [player_id], references: [user_id])
  player_id       String?
}

model Character {
  id              Int       @id @default(autoincrement())
  name            String
  role            Role?     @relation(fields: [role_id], references: [id])
  related         String?
  alignment       Alignment
  game            Game?     @relation(fields: [game_id], references: [id])
  game_id         String?
  role_id         String?
  related_role_id String?
  related_role    Role?     @relation("RelatedRole", fields: [related_role_id], references: [id])
}

model Script {
  id                      Int       @id
  name                    String
  version                 String
  author                  String
  type                    String
  json_url                String
  pdf_url                 String
  roles                   Role[]
  characters_last_updated DateTime?
  games                   Game[]
}

model Role {
  id                String      @id
  name              String
  initial_alignment Alignment
  token_url         String
  type              RoleType
  scripts           Script[]
  related_character Character[] @relation("RelatedRole")
  character         Character[]
  tokens            Token[]
  related_tokens    Token[]     @relation("RelatedToken")
}

enum Alignment {
  GOOD
  EVIL
  NEUTRAL
}

enum RoleType {
  TOWNSFOLK
  OUTSIDER
  MINION
  DEMON
  TRAVELER
  FABLED
}

enum LocationType {
  ONLINE
  IN_PERSON
}

model UserSettings {
  user_id                 String          @id
  username                String          @unique
  display_name            String
  finished_welcome        Boolean         @default(false)
  avatar                  String?
  email                   String          @default("your@address.here")
  pronouns                String?
  bio                     String          @default("")
  location                String?
  links                   ExternalLink[]
  is_admin                Boolean         @default(false)
  privacy                 PrivacySetting  @default(PUBLIC)
  created_at              DateTime?       @default(now()) @db.Timestamptz(6)
  games                   Game[]
  following               Following[]     @relation("Following") // people I follow
  followers               Following[]     @relation("Follower") // people who follow me
  friend_requests         FriendRequest[] @relation("Receiver")
  sent_friend_requests    FriendRequest[] @relation("Sender")
  friends                 Friend[]        @relation("Friend")
  friend_of               Friend[]        @relation("FriendOf")
  token                   Token[]
  charts                  Chart[]
  bgg_username            String?
  bgg_cookies             String[]
  enable_bgstats          Boolean         @default(false)
  communities             Community[]     @relation("CommunityMember")
  community_admin         Community[]     @relation("CommunityAdmin")
  community_banned        Community[]     @relation("CommunityBanned")
  community_join_requests Community[]     @relation("CommunityJoinRequest")
  community_posts         CommunityPost[]
  EventAttendee           EventAttendee[]
}

enum PrivacySetting {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
  PERSONAL
}

model FriendRequest {
  id           Int          @id @default(autoincrement())
  user         UserSettings @relation("Receiver", fields: [user_id], references: [user_id])
  from_user    UserSettings @relation("Sender", fields: [from_user_id], references: [user_id])
  user_id      String
  from_user_id String
  accepted     Boolean      @default(false)
  created_at   DateTime?    @default(now()) @db.Timestamptz(6)

  @@unique([user_id, from_user_id])
}

model Friend {
  id         Int          @id @default(autoincrement())
  user       UserSettings @relation("FriendOf", fields: [user_id], references: [user_id])
  friend     UserSettings @relation("Friend", fields: [friend_id], references: [user_id])
  user_id    String
  friend_id  String
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
}

model Following {
  user         UserSettings @relation("Following", fields: [user_id], references: [user_id])
  following    UserSettings @relation("Follower", fields: [following_id], references: [user_id])
  user_id      String
  following_id String

  @@id([user_id, following_id])
}

model ExternalLink {
  id           Int          @id @default(autoincrement())
  user         UserSettings @relation(fields: [user_id], references: [user_id])
  user_id      String
  service_name String
  url          String
}

model Chart {
  id           Int          @id @default(autoincrement())
  user         UserSettings @relation(fields: [user_id], references: [user_id])
  user_id      String
  title        String
  type         ChartType
  data         DataField
  pivot        DataField?
  include_tags String[]
  exclude_tags String[]
  width        Int
  height       Int
}

enum ChartType {
  BAR
  PIE
  POLAR_AREA
}

enum DataField {
  ROLE
  ALIGNMENT
  SCRIPT
  GAME_SIZE
  WIN
}

model Community {
  id            Int             @id @default(autoincrement())
  name          String
  slug          String          @unique
  description   String
  members       UserSettings[]  @relation("CommunityMember")
  admins        UserSettings[]  @relation("CommunityAdmin")
  banned_users  UserSettings[]  @relation("CommunityBanned")
  join_requests UserSettings[]  @relation("CommunityJoinRequest")
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  deleted       Boolean         @default(false)
  deleted_date  DateTime?
  posts         CommunityPost[]
  icon          String          @default("/img/default.png")
  games         Game[]
  is_private    Boolean         @default(false)
  events        Event[]
}

model CommunityPost {
  id           String          @id @default(uuid())
  community    Community       @relation(fields: [community_id], references: [id])
  community_id Int
  user         UserSettings    @relation(fields: [user_id], references: [user_id])
  user_id      String
  content      String
  created_at   DateTime        @default(now()) @db.Timestamptz(6)
  deleted      Boolean         @default(false)
  deleted_date DateTime?
  reply_to     CommunityPost?  @relation("Reply", fields: [reply_to_id], references: [id])
  reply_to_id  String?
  replies      CommunityPost[] @relation("Reply")
}

model Event {
  id                 String          @id @default(uuid())
  created_at         DateTime        @default(now()) @db.Timestamptz(6)
  start              DateTime        @default(now()) @db.Timestamptz(6)
  end                DateTime        @default(dbgenerated("NOW() + interval '1.5 hours'")) @db.Timestamptz(6)
  title              String
  description        String
  player_count       Int?
  location_type      LocationType    @default(ONLINE)
  location           String
  image              String?
  registered_players EventAttendee[]
  community          Community?      @relation(fields: [community_id], references: [id])
  community_id       Int?
  who_can_register   WhoCanRegister  @default(COMMUNITY_MEMBERS)
}

enum WhoCanRegister {
  ANYONE
  COMMUNITY_MEMBERS
}

model EventAttendee {
  id         Int           @id @default(autoincrement())
  event      Event         @relation(fields: [event_id], references: [id])
  event_id   String
  name       String
  user       UserSettings? @relation(fields: [user_id], references: [user_id])
  user_id    String?
  created_at DateTime      @default(now()) @db.Timestamptz(6)
}
