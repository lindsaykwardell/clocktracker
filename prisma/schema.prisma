generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id                String        @id @default(uuid())
  user_id           String
  created_at        DateTime?     @default(now()) @db.Timestamptz(6)
  date              DateTime
  script            String
  script_id         Int?
  location_type     LocationType  @default(ONLINE)
  location          String
  community         String        @default("")
  player_count      Int?
  traveler_count    Int?
  player_characters Character[]
  win               Boolean
  notes             String
  image_urls        String[]
  storyteller       String?
  user              UserSettings? @relation(fields: [user_id], references: [user_id])
  associated_script Script?       @relation(fields: [script_id], references: [id])
  grimoire          Grimoire[]
  grimoire_id       Int?          @unique
  is_storyteller    Boolean       @default(false)
}

model Grimoire {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  tokens     Token[]
  game       Game?    @relation(fields: [game_id], references: [id])
  game_id    String?
}

model Token {
  id              Int       @id @default(autoincrement())
  role            Role?     @relation(fields: [role_id], references: [id])
  role_id         String?
  related_role    Role?     @relation("RelatedToken", fields: [related_role_id], references: [id])
  related_role_id String?
  alignment       Alignment
  is_dead         Boolean   @default(false)
  order           Int
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  grimoire        Grimoire? @relation(fields: [grimoire_id], references: [id])
  grimoire_id     Int?
  player_name     String    @default("")
}

model Character {
  id              Int       @id @default(autoincrement())
  name            String
  role            Role?     @relation(fields: [role_id], references: [id])
  related         String?
  alignment       Alignment
  game            Game?     @relation(fields: [game_id], references: [id])
  game_id         String?
  role_id         String?
  related_role_id String?
  related_role    Role?     @relation("RelatedRole", fields: [related_role_id], references: [id])
}

model Script {
  id                      Int       @id
  name                    String
  version                 String
  author                  String
  type                    String
  json_url                String
  pdf_url                 String
  roles                   Role[]
  characters_last_updated DateTime?
  games                   Game[]
}

model Role {
  id                String      @id
  name              String
  initial_alignment Alignment
  token_url         String
  type              RoleType
  scripts           Script[]
  related_character Character[] @relation("RelatedRole")
  character         Character[]
  tokens            Token[]
  related_tokens    Token[]     @relation("RelatedToken")
}

enum Alignment {
  GOOD
  EVIL
  NEUTRAL
}

enum RoleType {
  TOWNSFOLK
  OUTSIDER
  MINION
  DEMON
  TRAVELER
  FABLED
}

enum LocationType {
  ONLINE
  IN_PERSON
}

model UserSettings {
  user_id              String          @id
  username             String          @unique
  display_name         String
  finished_welcome     Boolean         @default(false)
  avatar               String?
  email                String          @default("your@address.here")
  pronouns             String?
  bio                  String          @default("")
  location             String?
  links                ExternalLink[]
  is_admin             Boolean         @default(false)
  games                Game[]
  created_at           DateTime?       @default(now()) @db.Timestamptz(6)
  following            Following[]     @relation("Following") // people I follow
  followers            Following[]     @relation("Follower") // people who follow me
  notifications        Notification[]  @relation("Receiver")
  sent_notifications   Notification[]  @relation("Sender")
  privacy              PrivacySetting  @default(PUBLIC)
  friend_requests      FriendRequest[] @relation("Receiver")
  sent_friend_requests FriendRequest[] @relation("Sender")
  friends              Friend[]        @relation("Friend")
  friend_of            Friend[]        @relation("FriendOf")
}

enum PrivacySetting {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
  PERSONAL
}

model FriendRequest {
  id           Int          @id @default(autoincrement())
  user         UserSettings @relation("Receiver", fields: [user_id], references: [user_id])
  from_user    UserSettings @relation("Sender", fields: [from_user_id], references: [user_id])
  user_id      String
  from_user_id String
  accepted     Boolean      @default(false)
  created_at   DateTime?    @default(now()) @db.Timestamptz(6)

  @@unique([user_id, from_user_id])
}

model Friend {
  id         Int          @id @default(autoincrement())
  user       UserSettings @relation("FriendOf", fields: [user_id], references: [user_id])
  friend     UserSettings @relation("Friend", fields: [friend_id], references: [user_id])
  user_id    String
  friend_id  String
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
}

model Following {
  user         UserSettings @relation("Following", fields: [user_id], references: [user_id])
  following    UserSettings @relation("Follower", fields: [following_id], references: [user_id])
  user_id      String
  following_id String

  @@id([user_id, following_id])
}

model ExternalLink {
  id           Int          @id @default(autoincrement())
  user         UserSettings @relation(fields: [user_id], references: [user_id])
  user_id      String
  service_name String
  url          String
}

model Notification {
  id           Int              @id @default(autoincrement())
  user         UserSettings     @relation("Receiver", fields: [user_id], references: [user_id])
  from_user    UserSettings     @relation("Sender", fields: [from_user_id], references: [user_id])
  user_id      String
  from_user_id String
  type         NotificationType
  message      String
  read         Boolean          @default(false)
  created_at   DateTime?        @default(now()) @db.Timestamptz(6)
}

enum NotificationType {
  FOLLOW
}
